openapi: 3.0.0
info:
  title: express-prisma-ts-boilerplate
  description: >-
    A starter project written in TypeScript for quickly building Express RESTful
    APIs using ORM, loggers, schema validator, authentication, unit test
    coverage, and much more.
  version: 1.0.1
  contact:
    name: Vincent Jean
    email: vincent.queimado@gmail.com
  license:
    name: ISC
    url: https://github.com/vincent-queimado
servers:
  - url: /api/
    description: Api Ver. 1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: 游늶 API Info & Health
  - name: 游녻 Client - Authentication
  - name: 游댏 Client - Password Recovery
  - name: 游논 Client - User Profile
  - name: 游댢 Admin - User Management
  - name: 游닎 Development - Templates
    description: Email and SMS templates (development only)
paths:
  /:
    get:
      tags:
        - 游늶 API Info & Health
      summary: Root Endpoint
      description: API root endpoint
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /info:
    get:
      tags:
        - 游늶 API Info & Health
      summary: API Info
      description: Get API information and status
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /logs:
    get:
      tags:
        - 游늶 API Info & Health
      summary: API Logs
      description: Get API logs (development only)
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /docs:
    get:
      tags:
        - 游늶 API Info & Health
      summary: API Documentation
      description: Swagger API documentation (development only)
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/register:
    post:
      tags:
        - 游녻 Client - Authentication
      summary: Register User
      description: Register a new user account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: johndoe@sample.com
                name: John Doe
                phone: '081234567890'
                password: Johndoe@1234
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/register/confirmation:
    get:
      tags:
        - 游녻 Client - Authentication
      summary: Register Confirmation
      description: Confirm user registration with email token
      parameters:
        - name: email
          in: query
          schema:
            type: string
          description: User email
          example: '{{user_email}}'
        - name: token
          in: query
          schema:
            type: string
          description: Confirmation token from email
          example: sample_token_here
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/login:
    post:
      tags:
        - 游녻 Client - Authentication
      summary: Login
      description: Login user and get JWT token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: johndoe@sample.com
                password: Johndoe@1234
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/logout:
    get:
      tags:
        - 游녻 Client - Authentication
      summary: Logout
      description: Logout user (requires authentication)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/google:
    get:
      tags:
        - 游녻 Client - Authentication
      summary: Google OAuth URL
      description: Get Google OAuth authorization URL
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/google/callback:
    get:
      tags:
        - 游녻 Client - Authentication
      summary: Google OAuth Callback
      description: Handle Google OAuth callback with authorization code
      parameters:
        - name: code
          in: query
          schema:
            type: string
          description: Authorization code from Google OAuth
          example: authorization_code_from_google
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/google/token:
    post:
      tags:
        - 游녻 Client - Authentication
      summary: Google OAuth Token
      description: Authenticate with Google access token (for mobile apps)
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"accessToken\": \"google_access_token_here\"\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/forgotpassword/request:
    post:
      tags:
        - 游댏 Client - Password Recovery
      summary: Forgot Password Request
      description: Request password reset token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: johndoe@sample.com
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/auth/forgotpassword/reset:
    post:
      tags:
        - 游댏 Client - Password Recovery
      summary: Forgot Password Reset
      description: Reset password with token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: johndoe@sample.com
                token: password_reset_token_here
                password: NewPassword@1234
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /client/user/me:
    get:
      tags:
        - 游논 Client - User Profile
      summary: Get My Profile
      description: Get current user profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - 游논 Client - User Profile
      summary: Update My Profile
      description: Update current user profile information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: John Doe Updated
                phone: '081234567891'
                avatar: https://example.com/avatar.jpg
                accountName: John's Account
                accountLocationState: Jakarta
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - 游논 Client - User Profile
      summary: Delete My Account
      description: Delete current user account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/users:
    get:
      tags:
        - 游댢 Admin - User Management
      summary: Get All Users
      description: Get list of all users (admin access required)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /templates/email:
    get:
      tags:
        - 游닎 Development - Templates
      summary: Email Templates
      description: View email templates (development only)
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /templates/sms:
    get:
      tags:
        - 游닎 Development - Templates
      summary: SMS Templates
      description: View SMS templates (development only)
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
